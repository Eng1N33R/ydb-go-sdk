// Code generated by ydbgen; DO NOT EDIT.

package tests

import (
	"strconv"

	"github.com/yandex-cloud/ydb-go-sdk"
	"github.com/yandex-cloud/ydb-go-sdk/table"
)

var (
	_ strconv.Itoa
	_ ydb.Value
	_ table.QueryParameters
)

func (c *ConvAssert) Scan(res *table.Result) (err error) {
	res.NextItem()
	c.Int8Int16 = int16(res.OInt8())

	res.NextItem()
	c.Int32Int64 = int64(res.OInt32())

	res.NextItem()
	c.Int16Int8 = ydbConvI16ToI8(res.OInt16())

	res.NextItem()
	c.Uint64Int8 = ydbConvU64ToI8(res.OUint64())

	res.NextItem()
	c.Uint32Uint = uint(res.OUint32())

	res.NextItem()
	c.Int32Int = int(res.OInt32())

	res.NextItem()
	c.Int32ToByte = ydbConvI32ToB(res.OInt32())

	return res.Err()
}

func ydbConvI16ToI8(x int16) int8 { 
	const (
		bits = 8
		mask = (1 << (bits - 1)) - 1
	)
	var abs uint64
	{
		v := int64(x)
		m := v >> 63
		abs = uint64(v ^ m - m)
	}
	if abs&mask != abs {
		var str string
		{
			s, err := strconv.FormatInt(int64(x), 10)
			if err != nil {
				panic("ydbgen: internal: format error")
			}
			str = s
		}
		panic(
			"ydbgen: convassert: " + str + " (type int16) overflows int8",
		)
	}
	return int8(x)
}

func ydbConvI32ToB(x int32) byte { 
	if x < 0 {
		panic("ydbgen: convassert: conversion of negative int32 to byte")
	}
	const (
		bits = 8
		mask = (1 << (bits)) - 1
	)
	var abs uint64
	{
		v := int64(x)
		m := v >> 63
		abs = uint64(v ^ m - m)
	}
	if abs&mask != abs {
		var str string
		{
			s, err := strconv.FormatInt(int64(x), 10)
			if err != nil {
				panic("ydbgen: internal: format error")
			}
			str = s
		}
		panic(
			"ydbgen: convassert: " + str + " (type int32) overflows byte",
		)
	}
	return byte(x)
}

func ydbConvU64ToI8(x uint64) int8 { 
	const (
		bits = 8
		mask = (1 << (bits - 1)) - 1
	)
	abs := uint64(x)
	if abs&mask != abs {
		var str string
		{
			s, err := strconv.FormatUint(uint64(x), 10)
			if err != nil {
				panic("ydbgen: internal: format error")
			}
			str = s
		}
		panic(
			"ydbgen: convassert: " + str + " (type uint64) overflows int8",
		)
	}
	return int8(x)
}

