// Code generated by ydbgen; DO NOT EDIT.

package tests

import (
	"strconv"

	"github.com/yandex-cloud/ydb-go-sdk"
	"github.com/yandex-cloud/ydb-go-sdk/table"
)

var (
	_ = strconv.Itoa
	_ = ydb.StringValue
	_ = table.NewQueryParameters
)

func (o *Optional) Scan(res *table.Result) (err error) {
	res.SeekItem("int64")
	res.Unwrap()
	if !res.IsNull() {
		x := int64(res.Int16())
		o.Int64.Set(x)
	}

	res.SeekItem("str")
	{
		x := string(res.String())
		o.Str.Set(x)
	}

	res.SeekItem("int32")
	o.Int32 = res.OInt32()

	return res.Err()
}

func (o *Optional) QueryParameters() *table.QueryParameters {
	var Int64Value ydb.Value
	{
		x, ok := o.Int64.Get()
		if ok {
			Int64Value = ydb.OptionalValue(ydb.Int16Value(ydbConvI64ToI16(x)))
		} else {
			Int64Value = ydb.NullValue(ydb.TypeInt16)
		}
	}
	var StrValue ydb.Value
	{
		x, ok := o.Str.Get()
		if ok {
			StrValue = ydb.StringValue([]uint8(x))
		} else {
			panic("ydbgen: no value for non-optional field \"Str\"")
		}
	}
	return table.NewQueryParameters(
		table.ValueParam("$int64", Int64Value),
		table.ValueParam("$str", StrValue),
		table.ValueParam("$int32", ydb.OptionalValue(ydb.Int32Value(o.Int32))),
	)
}

func (o *Optional) StructValue() ydb.Value {
	var Int64Value ydb.Value
	{
		x, ok := o.Int64.Get()
		if ok {
			Int64Value = ydb.OptionalValue(ydb.Int16Value(ydbConvI64ToI16(x)))
		} else {
			Int64Value = ydb.NullValue(ydb.TypeInt16)
		}
	}
	var StrValue ydb.Value
	{
		x, ok := o.Str.Get()
		if ok {
			StrValue = ydb.StringValue([]uint8(x))
		} else {
			panic("ydbgen: no value for non-optional field \"Str\"")
		}
	}
	v := ydb.StructValue(
		ydb.StructFieldValue("int64", Int64Value),
		ydb.StructFieldValue("str", StrValue),
		ydb.StructFieldValue("int32", ydb.OptionalValue(ydb.Int32Value(o.Int32))),
	)
	return v
}

func (o *Optional) StructType() ydb.Type {
	return ydb.Struct(
		ydb.StructField("int64", ydb.Optional(ydb.TypeInt16)),
		ydb.StructField("str", ydb.TypeString),
		ydb.StructField("int32", ydb.Optional(ydb.TypeInt32)),
	)
}

func ydbConvI64ToI16(x int64) int16 { 
	const (
		bits = 16
		mask = (1 << (bits - 1)) - 1
	)
	var abs uint64
	{
		v := int64(x)
		m := v >> 63
		abs = uint64(v ^ m - m)
	}
	if abs&mask != abs {
		panic(
			"ydbgen: convassert: " + strconv.FormatInt(int64(x), 10) + 
				" (type int64) overflows int16",
		)
	}
	return int16(x)
}

