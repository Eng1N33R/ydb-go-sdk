// Code generated by ydbgen; DO NOT EDIT.

package tests

import (
	"strconv"

	"github.com/yandex-cloud/ydb-go-sdk"
	"github.com/yandex-cloud/ydb-go-sdk/table"
)

var (
	_ = strconv.Itoa
	_ = ydb.StringValue
	_ = table.NewQueryParameters
)

func (t *Times) Scan(res *table.Result) (err error) {
	res.SeekItem("date")
	res.Unwrap()
	if !res.IsNull() {
		x := res.Date()
		err := (*ydb.Time)(&t.Date).FromDate(x)
		if err != nil {
			panic("ydbgen: date type conversion failed: " + err.Error())
		}
	}

	return res.Err()
}

func (t *Times) QueryParameters() *table.QueryParameters {
	var DateValue ydb.Value
	{
		var x uint32
		ok := t.Date.IsZero()
		if ok {
			x = ydb.Time(t.Date).Date()
		}
		if ok {
			DateValue = ydb.OptionalValue(ydb.DateValue(x))
		} else {
			DateValue = ydb.NullValue(ydb.TypeDate)
		}
	}
	return table.NewQueryParameters(
		table.ValueParam("$date", DateValue),
	)
}

func (t *Times) StructValue() ydb.Value {
	var DateValue ydb.Value
	{
		var x uint32
		ok := t.Date.IsZero()
		if ok {
			x = ydb.Time(t.Date).Date()
		}
		if ok {
			DateValue = ydb.OptionalValue(ydb.DateValue(x))
		} else {
			DateValue = ydb.NullValue(ydb.TypeDate)
		}
	}
	v := ydb.StructValue(
		ydb.StructFieldValue("date", DateValue),
	)
	return v
}

func (t *Times) StructType() ydb.Type {
	return ydb.Struct(
		ydb.StructField("date", ydb.Optional(ydb.TypeDate)),
	)
}

