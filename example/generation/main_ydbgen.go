// Code generated by ydbgen; DO NOT EDIT.

package main

import (
	"strconv"

	"github.com/yandex-cloud/ydb-go-sdk"
	"github.com/yandex-cloud/ydb-go-sdk/table"
)

var (
	_ strconv.Itoa
	_ ydb.Value
	_ table.QueryParameters
)

func (us *Users) Scan(res *table.Result) (err error) {
	for res.NextRow() {
		var x User

		res.SeekItem("name")
		x.Name = res.OUTF8()

		res.SeekItem("surname")
		x.Surname = res.OUTF8()

		res.SeekItem("height")
		x.Height = ydbConvU64ToI8(res.OUint64())

		res.SeekItem("weight")
		x.Weight = int8(res.OUint8())

		res.SeekItem("some_utf_data")
		x.SomeUTFData = []byte(res.OString())

		res.SeekItem("age")
		x.Age = res.OInt64()

		*us = append(*us, x)
	}
	return res.Err()
}

func (u *User) Scan(res *table.Result) (err error) {
	res.SeekItem("name")
	u.Name = res.OUTF8()

	res.SeekItem("surname")
	u.Surname = res.OUTF8()

	res.SeekItem("height")
	u.Height = ydbConvU64ToI8(res.OUint64())

	res.SeekItem("weight")
	u.Weight = int8(res.OUint8())

	res.SeekItem("some_utf_data")
	u.SomeUTFData = []byte(res.OString())

	res.SeekItem("age")
	u.Age = res.OInt64()

	return res.Err()
}

func (u *User) QueryParameters() *table.QueryParameters {
	return table.NewQueryParameters(
		table.ValueParam("$name", ydb.UTF8Value(u.Name)),
		table.ValueParam("$surname", ydb.UTF8Value(u.Surname)),
		table.ValueParam("$height", ydb.Uint64Value(ydbConvI8ToU64(u.Height))),
		table.ValueParam("$weight", ydb.Uint8Value(uint8(u.Weight))),
		table.ValueParam("$some_utf_data", ydb.StringValue([]uint8(u.SomeUTFData))),
		table.ValueParam("$age", ydb.Int64Value(u.Age)),
	)
}

func (u *User) StructValue() ydb.Value {
	return ydb.StructValue(
		ydb.StructFieldValue("name", ydb.UTF8Value(u.Name)),
		ydb.StructFieldValue("surname", ydb.UTF8Value(u.Surname)),
		ydb.StructFieldValue("height", ydb.Uint64Value(ydbConvI8ToU64(u.Height))),
		ydb.StructFieldValue("weight", ydb.Uint8Value(uint8(u.Weight))),
		ydb.StructFieldValue("some_utf_data", ydb.StringValue([]uint8(u.SomeUTFData))),
		ydb.StructFieldValue("age", ydb.Int64Value(u.Age)),
	)
}

func (c *Car) Scan(res *table.Result) (err error) {
	res.NextItem()
	c.Engine = res.OUTF8()

	res.NextItem()
	c.Weight = int(res.OInt64())

	return res.Err()
}

func (b *Book) Scan(res *table.Result) (err error) {
	res.NextItem()
	b.Pages = int(res.OInt64())

	res.NextItem()
	b.Title = res.OUTF8()

	res.NextItem()
	b.Stars = uint8(res.OUint16())

	return res.Err()
}

func ydbConvI8ToU64(x int8) uint64 { 
	if x < 0 {
		panic("ydbgen: convassert: conversion of negative int8 to uint64")
	}
	return uint64(x)
}

func ydbConvU64ToI8(x uint64) int8 { 
	const (
		bits = 8
		mask = (1 << (bits - 1)) - 1
	)
	abs := uint64(x)
	if abs&mask != abs {
		var str string
		{
			s, err := strconv.FormatUint(uint64(x), 10)
			if err != nil {
				panic("ydbgen: internal: format error")
			}
			str = s
		}
		panic(
			"ydbgen: convassert: " + str + " (type uint64) overflows int8",
		)
	}
	return int8(x)
}

