// Code generated by ydbgen; DO NOT EDIT.

package main

import (
	"strconv"

	"github.com/yandex-cloud/ydb-go-sdk"
	"github.com/yandex-cloud/ydb-go-sdk/table"
)

var (
	_ = strconv.Itoa
	_ = ydb.StringValue
	_ = table.NewQueryParameters
)

func (u *User) StructValue() ydb.Value {
	val := ydb.StructValue(
		ydb.StructFieldValue("user_id", ydb.OptionalValue(ydb.Uint64Value(u.ID))),
		ydb.StructFieldValue("name", ydb.OptionalValue(ydb.UTF8Value(u.Name))),
		ydb.StructFieldValue("age", ydb.OptionalValue(ydb.Uint32Value(u.Age))),
	)
	return val
}

func (s *Series) Scan(res *table.Result) (err error) {
	res.NextItem()
	s.ID = res.OUint64()

	res.NextItem()
	s.Title = res.OUTF8()

	res.NextItem()
	s.Info = res.OUTF8()

	res.NextItem()
	res.Unwrap()
	if !res.IsNull() {
		x := res.Datetime()
		err := (*ydb.Time)(&s.ReleaseDate).FromDatetime(x)
		if err != nil {
			panic("ydbgen: date type conversion failed: " + err.Error())
		}
	}

	res.NextItem()
	s.Views = res.OUint64()

	res.NextItem()
	s.UploadedUserID = res.OUint64()

	return res.Err()
}

func (s *Series) StructValue() ydb.Value {
	var ReleaseDateValue ydb.Value
	{
		var x uint32
		ok := !s.ReleaseDate.IsZero()
		if ok {
			x = ydb.Time(s.ReleaseDate).Datetime()
		}
		if ok {
			ReleaseDateValue = ydb.OptionalValue(ydb.DatetimeValue(x))
		} else {
			ReleaseDateValue = ydb.NullValue(ydb.TypeDatetime)
		}
	}
	val := ydb.StructValue(
		ydb.StructFieldValue("series_id", ydb.OptionalValue(ydb.Uint64Value(s.ID))),
		ydb.StructFieldValue("title", ydb.OptionalValue(ydb.UTF8Value(s.Title))),
		ydb.StructFieldValue("info", ydb.OptionalValue(ydb.UTF8Value(s.Info))),
		ydb.StructFieldValue("release_date", ReleaseDateValue),
		ydb.StructFieldValue("views", ydb.OptionalValue(ydb.Uint64Value(s.Views))),
		ydb.StructFieldValue("uploaded_user_id", ydb.OptionalValue(ydb.Uint64Value(s.UploadedUserID))),
	)
	return val
}

func (us UsersList) ListValue() ydb.Value {
	values := make([]ydb.Value, len(us))
	for i, u := range us {
		values[i] = ydb.StructValue(
			ydb.StructFieldValue("user_id", ydb.OptionalValue(ydb.Uint64Value(u.ID))),
			ydb.StructFieldValue("name", ydb.OptionalValue(ydb.UTF8Value(u.Name))),
			ydb.StructFieldValue("age", ydb.OptionalValue(ydb.Uint32Value(u.Age))),
		)
	}
	if len(values) == 0 {
		return ydb.ZeroValue(
			ydb.List(ydb.Struct(
				ydb.StructField("user_id", ydb.Optional(ydb.TypeUint64)),
				ydb.StructField("name", ydb.Optional(ydb.TypeUTF8)),
				ydb.StructField("age", ydb.Optional(ydb.TypeUint32)),
			)),
		)
	}
	return ydb.ListValue(values...)
}

func (ss *SeriesList) Scan(res *table.Result) (err error) {
	for res.NextRow() {
		var x Series

		res.NextItem()
		x.ID = res.OUint64()

		res.NextItem()
		x.Title = res.OUTF8()

		res.NextItem()
		x.Info = res.OUTF8()

		res.NextItem()
		res.Unwrap()
		if !res.IsNull() {
			x0 := res.Datetime()
			err := (*ydb.Time)(&x.ReleaseDate).FromDatetime(x0)
			if err != nil {
				panic("ydbgen: date type conversion failed: " + err.Error())
			}
		}

		res.NextItem()
		x.Views = res.OUint64()

		res.NextItem()
		x.UploadedUserID = res.OUint64()

		if res.Err() == nil {
			*ss = append(*ss, x)
		}
	}
	return res.Err()
}

func (ss SeriesList) ListValue() ydb.Value {
	values := make([]ydb.Value, len(ss))
	for i, s := range ss {
		var ReleaseDateValue ydb.Value
		{
			var x uint32
			ok := !s.ReleaseDate.IsZero()
			if ok {
				x = ydb.Time(s.ReleaseDate).Datetime()
			}
			if ok {
				ReleaseDateValue = ydb.OptionalValue(ydb.DatetimeValue(x))
			} else {
				ReleaseDateValue = ydb.NullValue(ydb.TypeDatetime)
			}
		}
		values[i] = ydb.StructValue(
			ydb.StructFieldValue("series_id", ydb.OptionalValue(ydb.Uint64Value(s.ID))),
			ydb.StructFieldValue("title", ydb.OptionalValue(ydb.UTF8Value(s.Title))),
			ydb.StructFieldValue("info", ydb.OptionalValue(ydb.UTF8Value(s.Info))),
			ydb.StructFieldValue("release_date", ReleaseDateValue),
			ydb.StructFieldValue("views", ydb.OptionalValue(ydb.Uint64Value(s.Views))),
			ydb.StructFieldValue("uploaded_user_id", ydb.OptionalValue(ydb.Uint64Value(s.UploadedUserID))),
		)
	}
	if len(values) == 0 {
		return ydb.ZeroValue(
			ydb.List(ydb.Struct(
				ydb.StructField("series_id", ydb.Optional(ydb.TypeUint64)),
				ydb.StructField("title", ydb.Optional(ydb.TypeUTF8)),
				ydb.StructField("info", ydb.Optional(ydb.TypeUTF8)),
				ydb.StructField("release_date", ydb.Optional(ydb.TypeDatetime)),
				ydb.StructField("views", ydb.Optional(ydb.TypeUint64)),
				ydb.StructField("uploaded_user_id", ydb.Optional(ydb.TypeUint64)),
			)),
		)
	}
	return ydb.ListValue(values...)
}

